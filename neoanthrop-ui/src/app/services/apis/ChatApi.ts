/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  StringResponse,
} from '../models/index';
import {
    StringResponseFromJSON,
    StringResponseToJSON,
} from '../models/index';

export interface CreateChatRequest {
    senderId: string;
    recipientId: string;
}

/**
 * 
 */
export class ChatApi extends runtime.BaseAPI {

    /**
     */
    async createChatRaw(requestParameters: CreateChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringResponse>> {
        if (requestParameters['senderId'] == null) {
            throw new runtime.RequiredError(
                'senderId',
                'Required parameter "senderId" was null or undefined when calling createChat().'
            );
        }

        if (requestParameters['recipientId'] == null) {
            throw new runtime.RequiredError(
                'recipientId',
                'Required parameter "recipientId" was null or undefined when calling createChat().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['senderId'] != null) {
            queryParameters['sender-id'] = requestParameters['senderId'];
        }

        if (requestParameters['recipientId'] != null) {
            queryParameters['recipient-id'] = requestParameters['recipientId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringResponseFromJSON(jsonValue));
    }

    /**
     */
    async createChat(requestParameters: CreateChatRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringResponse> {
        const response = await this.createChatRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getChatsByUserRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<object>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/chat`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getChatsByUser(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<object>> {
        const response = await this.getChatsByUserRaw(initOverrides);
        return await response.value();
    }

}
