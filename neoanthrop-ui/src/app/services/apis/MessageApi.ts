/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MessageRequest,
  MessageResponse,
} from '../models/index';
import {
    MessageRequestFromJSON,
    MessageRequestToJSON,
    MessageResponseFromJSON,
    MessageResponseToJSON,
} from '../models/index';

export interface GetMessagesRequest {
    chatId: string;
}

export interface SaveMessageRequest {
    messageRequest: MessageRequest;
}

export interface SetMessagesToSeenRequest {
    chatId: string;
}

export interface UploadMediaRequest {
    chatId: string;
    file: Blob;
}

/**
 * 
 */
export class MessageApi extends runtime.BaseAPI {

    /**
     */
    async getMessagesRaw(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<MessageResponse>>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling getMessages().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/messages/chat/{chat-id}`.replace(`{${"chat-id"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(MessageResponseFromJSON));
    }

    /**
     */
    async getMessages(requestParameters: GetMessagesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<MessageResponse>> {
        const response = await this.getMessagesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Save message
     */
    async saveMessageRaw(requestParameters: SaveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['messageRequest'] == null) {
            throw new runtime.RequiredError(
                'messageRequest',
                'Required parameter "messageRequest" was null or undefined when calling saveMessage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/v1/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MessageRequestToJSON(requestParameters['messageRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Save message
     */
    async saveMessage(requestParameters: SaveMessageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.saveMessageRaw(requestParameters, initOverrides);
    }

    /**
     */
    async setMessagesToSeenRaw(requestParameters: SetMessagesToSeenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling setMessagesToSeen().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chatId'] != null) {
            queryParameters['chatId'] = requestParameters['chatId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/v1/messages`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async setMessagesToSeen(requestParameters: SetMessagesToSeenRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setMessagesToSeenRaw(requestParameters, initOverrides);
    }

    /**
     * Upload media file
     */
    async uploadMediaRaw(requestParameters: UploadMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling uploadMedia().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadMedia().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['chatId'] != null) {
            queryParameters['chatId'] = requestParameters['chatId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/api/v1/messages/upload-media`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload media file
     */
    async uploadMedia(requestParameters: UploadMediaRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadMediaRaw(requestParameters, initOverrides);
    }

}
